/*****************************************************************************
 * Project: BaBar detector at the SLAC PEP-II B-factory
 * Package: RooFitCore
 *    File: $Id: RooDerivedReal.rdl,v 1.3 2001/04/21 02:42:43 verkerke Exp $
 * Authors:
 *   DK, David Kirkby, Stanford University, kirkby@hep.stanford.edu
 *   WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu
 * History:
 *   07-Mar-2001 WV Created initial version
 *
 * Copyright (C) 2001 University of California
 *****************************************************************************/
#ifndef ROO_DERIVED_REAL
#define ROO_DERIVED_REAL

#include "RooFitCore/RooAbsReal.hh"
class RooArgSet ;
class RooDataSet ;
class TH1F ;
class RooArgProxy ;

class RooDerivedReal : public RooAbsReal {
public:

  // Constructors, assignment etc
  inline RooDerivedReal() { }
  RooDerivedReal(const char *name, const char *title, const char *unit= "") ;
  RooDerivedReal(const char *name, const char *title, Double_t minVal, Double_t maxVal, 
	     const char *unit= "") ;
  RooDerivedReal(const RooDerivedReal& other, const char* name=0);
  RooDerivedReal& operator=(const RooDerivedReal& other) ;
  virtual ~RooDerivedReal();

  // Return value and unit accessors
  virtual Double_t getVal(const RooDataSet* dset=0) const ;

  virtual Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& numVars) const ;
  virtual Double_t analyticalIntegral(Int_t code) const ;

protected:

  RooAbsArg& operator=(const RooAbsArg& other) ;

  // Function evaluation and error tracing
  Double_t traceEval() const ;
  virtual Bool_t traceEvalHook(Double_t value) const { return kFALSE ;}
  virtual Double_t evaluate() const = 0 ;

  Bool_t tryIntegral(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const ;

  ClassDef(RooDerivedReal,1) // a real-valued variable and its value
};

#endif
