/*****************************************************************************
 * Project: BaBar detector at the SLAC PEP-II B-factory
 * Package: RooFitCore
 *    File: $Id: RooNormFunction.rdl,v 1.3 2001/04/20 01:51:39 verkerke Exp $
 * Authors:
 *   DK, David Kirkby, Stanford University, kirkby@hep.stanford.edu
 *   WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu
 * History:
 *   07-Mar-2001 WV Created initial version
 *
 * Copyright (C) 2001 University of California
 *****************************************************************************/

#ifndef ROO_NORM_FUNCTION
#define ROO_NORM_FUNCTION

#include "RooFitCore/RooDerivedReal.hh"
#include "RooFitCore/RooRealIntegral.hh"
class RooArgSet ;

class RooNormFunction : public RooDerivedReal {
public:

  // Constructors, assignment etc
  inline RooNormFunction() { }
  RooNormFunction(const char *name, const char *title, const char *unit= "") ;
  RooNormFunction(const char *name, const char *title, Double_t minVal, Double_t maxVal, const char *unit= "") ;
  RooNormFunction(const RooNormFunction& other);
  RooNormFunction(const char* name, const RooNormFunction& other);
  RooNormFunction& operator=(const RooNormFunction& other) ;
  virtual ~RooNormFunction();

  // Data set dependent accessors (normalization & dependent/parameter interpretation)
  Double_t getValNorm(const RooDataSet* dset) const { return getVal()/getNorm(dset) ; }
  Double_t getNorm(const RooDataSet* dset) const ;
  Int_t getNPar(const RooDataSet* set) ;
  RooArgSet* getParameters(const RooDataSet* set) const ;
  RooArgSet* getDependents(const RooDataSet* set) const ;

protected:

  mutable RooRealIntegral* _norm ;   // Normalization integral
  mutable RooDataSet* _lastDataSet ; // Data set for which normalization integral is valid

  RooAbsArg& operator=(const RooAbsArg& other) ;

  ClassDef(RooNormFunction,1) // a real-valued variable and its value
};

#endif
